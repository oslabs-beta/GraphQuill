{"version":3,"sources":["../webpack/bootstrap",".././node_modules/node-fetch/lib/index.mjs",".././src/extension.ts",".././src/modules/client sync ^.*$",".././src/modules/client/checkQueryBrackets.ts",".././src/modules/client/extractQueries.ts",".././src/modules/client/findPortNumber.ts",".././src/modules/client/findRootDirectory.ts",".././src/modules/client/parseConfigFile.ts",".././src/modules/client/parseQuery.ts",".././src/modules/client/readFileSendReqAndWriteResponse.ts",".././src/modules/server/checkForRunningServer.ts",".././src/modules/server/serverOff.ts",".././src/modules/server/serverOn.ts","../external \"child_process\"","../external \"fs\"","../external \"http\"","../external \"https\"","../external \"path\"","../external \"stream\"","../external \"url\"","../external \"vscode\"","../external \"zlib\""],"names":[],"mappings":";;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACJ;AACF;AACI;AACF;;AAExB;;AAEA;AACA,iBAAiB,mCAAM;;AAEvB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB,YAAY;AAC9B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,6BAA6B,qBAAqB;AAClD;AACA;AACA;AACA;;AAEA;AACA,QAAQ,mBAAmB;AAC3B,QAAQ,mBAAmB;AAC3B,SAAS;AACT,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA,oBAAoB,mCAAM;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kFAAkF;AAClF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE,yBAAyB,kCAAkC;AAC7D;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE,0BAA0B,mCAAM,GAAG;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,mCAAM;AAC3B;AACA,iHAAiH,UAAU,IAAI,YAAY;AAC3I;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ,GAAG;AACH,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ,+EAA+E,WAAW,WAAW,YAAY;AACjH;AACA,GAAG;AACH,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,QAAQ,mBAAmB;AAC3B,YAAY,mBAAmB;AAC/B,eAAe,mBAAmB;AAClC,QAAQ,mBAAmB;AAC3B,QAAQ,mBAAmB;AAC3B,QAAQ;AACR,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qEAAqE,SAAS;AAC9E;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,mCAAM;AAC7B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,oEAAoE,WAAW,SAAS,eAAe;AACvG,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,yEAAyE,WAAW,IAAI,YAAY;AACpG;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA,6CAA6C,WAAW,eAAe,YAAY;AACnF;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;AACA,4EAA4E,WAAW,IAAI,YAAY;AACvG;AACA,GAAG;AACH,EAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,YAAY,EAAE;AACd,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,mCAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,qBAAqB;AACrB,EAAE;AACF;AACA,4CAA4C;AAC5C,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA,8BAA8B,WAAW,mBAAmB;AAC5D,EAAE,0BAA0B,mCAAM;AAClC;AACA;AACA;AACA,EAAE;AACF;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,WAAW,KAAK;AAChB;AACA,yBAAyB,KAAK;AAC9B;AACA;;AAEA;AACA,YAAY,MAAM;AAClB;AACA,yBAAyB,MAAM;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,OAAO,mBAAmB;AAC1B,WAAW,mBAAmB;AAC9B,OAAO,mBAAmB;AAC1B,UAAU,mBAAmB;AAC7B,OAAO,mBAAmB;AAC1B,UAAU,mBAAmB;AAC7B,QAAQ,mBAAmB;AAC3B,UAAU,mBAAmB;AAC7B,WAAW;AACX,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA,EAAE;AACF;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,kBAAkB;;AAE9C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,qBAAqB,iCAAI;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA,OAAO,mBAAmB;AAC1B,UAAU,mBAAmB;AAC7B,MAAM,mBAAmB;AACzB,cAAc,mBAAmB;AACjC,cAAc,mBAAmB;AACjC,WAAW,mBAAmB;AAC9B,SAAS;AACT,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA,kBAAkB,gCAAG;AACrB,mBAAmB,gCAAG;;AAEtB,gDAAgD,mCAAM;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA,IAAI;AACJ;AACA,6BAA6B,MAAM;AACnC;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH,iEAAiE;;AAEjE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,UAAU,mBAAmB;AAC7B,OAAO,mBAAmB;AAC1B,WAAW,mBAAmB;AAC9B,YAAY,mBAAmB;AAC/B,SAAS,mBAAmB;AAC5B,UAAU;AACV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,+CAA+C,mCAAM;AACrD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,wBAAwB;AACxB;AACA;AACA;AACA,EAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sBAAsB,mCAAM;AAC5B,oBAAoB,gCAAG;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gDAAgD,kCAAK,GAAG,iCAAI;AAC5D;;AAEA;;AAEA;AACA;AACA;AACA,+CAA+C,mCAAM;AACrD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kDAAkD,YAAY;AAC9D;AACA,KAAK;AACL,IAAI;AACJ;;AAEA;AACA,uCAAuC,YAAY,mBAAmB,YAAY;AAClF;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,8DAA8D,YAAY;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6DAA6D,YAAY;AACzE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,iCAAI;AACf,iBAAiB,iCAAI;AACrB;;AAEA;AACA;AACA,qBAAqB,iCAAI;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iCAAI;AAC3B,MAAM;AACN,uBAAuB,iCAAI;AAC3B;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,iCAAiC,iCAAI;AACrC,qBAAqB,iCAAI;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEe,oEAAK,EAAC;AAC6B;;;;;;;;;;;;;;AC9lDlD;;;;;;;;;;OAUO;;;;;;;;;;;AAEP,gDAAgD;AAChD,2DAAiC;AAEjC,2CAA2C;AAC3C,MAAM,EAAE,GAAG,mBAAO,CAAC,cAAI,CAAC,CAAC;AAGzB,yCAAyC;AACzC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","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/extension.ts\");\n","import Stream from 'stream';\nimport http from 'http';\nimport Url from 'url';\nimport https from 'https';\nimport zlib from 'zlib';\n\n// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js\n\n// fix for \"Readable\" isn't a named export issue\nconst Readable = Stream.Readable;\n\nconst BUFFER = Symbol('buffer');\nconst TYPE = Symbol('type');\n\nclass Blob {\n\tconstructor() {\n\t\tthis[TYPE] = '';\n\n\t\tconst blobParts = arguments[0];\n\t\tconst options = arguments[1];\n\n\t\tconst buffers = [];\n\t\tlet size = 0;\n\n\t\tif (blobParts) {\n\t\t\tconst a = blobParts;\n\t\t\tconst length = Number(a.length);\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tconst element = a[i];\n\t\t\t\tlet buffer;\n\t\t\t\tif (element instanceof Buffer) {\n\t\t\t\t\tbuffer = element;\n\t\t\t\t} else if (ArrayBuffer.isView(element)) {\n\t\t\t\t\tbuffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);\n\t\t\t\t} else if (element instanceof ArrayBuffer) {\n\t\t\t\t\tbuffer = Buffer.from(element);\n\t\t\t\t} else if (element instanceof Blob) {\n\t\t\t\t\tbuffer = element[BUFFER];\n\t\t\t\t} else {\n\t\t\t\t\tbuffer = Buffer.from(typeof element === 'string' ? element : String(element));\n\t\t\t\t}\n\t\t\t\tsize += buffer.length;\n\t\t\t\tbuffers.push(buffer);\n\t\t\t}\n\t\t}\n\n\t\tthis[BUFFER] = Buffer.concat(buffers);\n\n\t\tlet type = options && options.type !== undefined && String(options.type).toLowerCase();\n\t\tif (type && !/[^\\u0020-\\u007E]/.test(type)) {\n\t\t\tthis[TYPE] = type;\n\t\t}\n\t}\n\tget size() {\n\t\treturn this[BUFFER].length;\n\t}\n\tget type() {\n\t\treturn this[TYPE];\n\t}\n\ttext() {\n\t\treturn Promise.resolve(this[BUFFER].toString());\n\t}\n\tarrayBuffer() {\n\t\tconst buf = this[BUFFER];\n\t\tconst ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n\t\treturn Promise.resolve(ab);\n\t}\n\tstream() {\n\t\tconst readable = new Readable();\n\t\treadable._read = function () {};\n\t\treadable.push(this[BUFFER]);\n\t\treadable.push(null);\n\t\treturn readable;\n\t}\n\ttoString() {\n\t\treturn '[object Blob]';\n\t}\n\tslice() {\n\t\tconst size = this.size;\n\n\t\tconst start = arguments[0];\n\t\tconst end = arguments[1];\n\t\tlet relativeStart, relativeEnd;\n\t\tif (start === undefined) {\n\t\t\trelativeStart = 0;\n\t\t} else if (start < 0) {\n\t\t\trelativeStart = Math.max(size + start, 0);\n\t\t} else {\n\t\t\trelativeStart = Math.min(start, size);\n\t\t}\n\t\tif (end === undefined) {\n\t\t\trelativeEnd = size;\n\t\t} else if (end < 0) {\n\t\t\trelativeEnd = Math.max(size + end, 0);\n\t\t} else {\n\t\t\trelativeEnd = Math.min(end, size);\n\t\t}\n\t\tconst span = Math.max(relativeEnd - relativeStart, 0);\n\n\t\tconst buffer = this[BUFFER];\n\t\tconst slicedBuffer = buffer.slice(relativeStart, relativeStart + span);\n\t\tconst blob = new Blob([], { type: arguments[2] });\n\t\tblob[BUFFER] = slicedBuffer;\n\t\treturn blob;\n\t}\n}\n\nObject.defineProperties(Blob.prototype, {\n\tsize: { enumerable: true },\n\ttype: { enumerable: true },\n\tslice: { enumerable: true }\n});\n\nObject.defineProperty(Blob.prototype, Symbol.toStringTag, {\n\tvalue: 'Blob',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\n/**\n * fetch-error.js\n *\n * FetchError interface for operational errors\n */\n\n/**\n * Create FetchError instance\n *\n * @param   String      message      Error message for human\n * @param   String      type         Error type for machine\n * @param   String      systemError  For Node.js system error\n * @return  FetchError\n */\nfunction FetchError(message, type, systemError) {\n  Error.call(this, message);\n\n  this.message = message;\n  this.type = type;\n\n  // when err.type is `system`, err.code contains system error code\n  if (systemError) {\n    this.code = this.errno = systemError.code;\n  }\n\n  // hide custom error implementation details from end-users\n  Error.captureStackTrace(this, this.constructor);\n}\n\nFetchError.prototype = Object.create(Error.prototype);\nFetchError.prototype.constructor = FetchError;\nFetchError.prototype.name = 'FetchError';\n\nlet convert;\ntry {\n\tconvert = require('encoding').convert;\n} catch (e) {}\n\nconst INTERNALS = Symbol('Body internals');\n\n// fix an issue where \"PassThrough\" isn't a named export for node <10\nconst PassThrough = Stream.PassThrough;\n\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nfunction Body(body) {\n\tvar _this = this;\n\n\tvar _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n\t    _ref$size = _ref.size;\n\n\tlet size = _ref$size === undefined ? 0 : _ref$size;\n\tvar _ref$timeout = _ref.timeout;\n\tlet timeout = _ref$timeout === undefined ? 0 : _ref$timeout;\n\n\tif (body == null) {\n\t\t// body is undefined or null\n\t\tbody = null;\n\t} else if (isURLSearchParams(body)) {\n\t\t// body is a URLSearchParams\n\t\tbody = Buffer.from(body.toString());\n\t} else if (isBlob(body)) ; else if (Buffer.isBuffer(body)) ; else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {\n\t\t// body is ArrayBuffer\n\t\tbody = Buffer.from(body);\n\t} else if (ArrayBuffer.isView(body)) {\n\t\t// body is ArrayBufferView\n\t\tbody = Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n\t} else if (body instanceof Stream) ; else {\n\t\t// none of the above\n\t\t// coerce to string then buffer\n\t\tbody = Buffer.from(String(body));\n\t}\n\tthis[INTERNALS] = {\n\t\tbody,\n\t\tdisturbed: false,\n\t\terror: null\n\t};\n\tthis.size = size;\n\tthis.timeout = timeout;\n\n\tif (body instanceof Stream) {\n\t\tbody.on('error', function (err) {\n\t\t\tconst error = err.name === 'AbortError' ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);\n\t\t\t_this[INTERNALS].error = error;\n\t\t});\n\t}\n}\n\nBody.prototype = {\n\tget body() {\n\t\treturn this[INTERNALS].body;\n\t},\n\n\tget bodyUsed() {\n\t\treturn this[INTERNALS].disturbed;\n\t},\n\n\t/**\n  * Decode response as ArrayBuffer\n  *\n  * @return  Promise\n  */\n\tarrayBuffer() {\n\t\treturn consumeBody.call(this).then(function (buf) {\n\t\t\treturn buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n\t\t});\n\t},\n\n\t/**\n  * Return raw response as Blob\n  *\n  * @return Promise\n  */\n\tblob() {\n\t\tlet ct = this.headers && this.headers.get('content-type') || '';\n\t\treturn consumeBody.call(this).then(function (buf) {\n\t\t\treturn Object.assign(\n\t\t\t// Prevent copying\n\t\t\tnew Blob([], {\n\t\t\t\ttype: ct.toLowerCase()\n\t\t\t}), {\n\t\t\t\t[BUFFER]: buf\n\t\t\t});\n\t\t});\n\t},\n\n\t/**\n  * Decode response as json\n  *\n  * @return  Promise\n  */\n\tjson() {\n\t\tvar _this2 = this;\n\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(buffer.toString());\n\t\t\t} catch (err) {\n\t\t\t\treturn Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n  * Decode response as text\n  *\n  * @return  Promise\n  */\n\ttext() {\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\treturn buffer.toString();\n\t\t});\n\t},\n\n\t/**\n  * Decode response as buffer (non-spec api)\n  *\n  * @return  Promise\n  */\n\tbuffer() {\n\t\treturn consumeBody.call(this);\n\t},\n\n\t/**\n  * Decode response as text, while automatically detecting the encoding and\n  * trying to decode to UTF-8 (non-spec api)\n  *\n  * @return  Promise\n  */\n\ttextConverted() {\n\t\tvar _this3 = this;\n\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\treturn convertBody(buffer, _this3.headers);\n\t\t});\n\t}\n};\n\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n\tbody: { enumerable: true },\n\tbodyUsed: { enumerable: true },\n\tarrayBuffer: { enumerable: true },\n\tblob: { enumerable: true },\n\tjson: { enumerable: true },\n\ttext: { enumerable: true }\n});\n\nBody.mixIn = function (proto) {\n\tfor (const name of Object.getOwnPropertyNames(Body.prototype)) {\n\t\t// istanbul ignore else: future proof\n\t\tif (!(name in proto)) {\n\t\t\tconst desc = Object.getOwnPropertyDescriptor(Body.prototype, name);\n\t\t\tObject.defineProperty(proto, name, desc);\n\t\t}\n\t}\n};\n\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return  Promise\n */\nfunction consumeBody() {\n\tvar _this4 = this;\n\n\tif (this[INTERNALS].disturbed) {\n\t\treturn Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));\n\t}\n\n\tthis[INTERNALS].disturbed = true;\n\n\tif (this[INTERNALS].error) {\n\t\treturn Body.Promise.reject(this[INTERNALS].error);\n\t}\n\n\tlet body = this.body;\n\n\t// body is null\n\tif (body === null) {\n\t\treturn Body.Promise.resolve(Buffer.alloc(0));\n\t}\n\n\t// body is blob\n\tif (isBlob(body)) {\n\t\tbody = body.stream();\n\t}\n\n\t// body is buffer\n\tif (Buffer.isBuffer(body)) {\n\t\treturn Body.Promise.resolve(body);\n\t}\n\n\t// istanbul ignore if: should never happen\n\tif (!(body instanceof Stream)) {\n\t\treturn Body.Promise.resolve(Buffer.alloc(0));\n\t}\n\n\t// body is stream\n\t// get ready to actually consume the body\n\tlet accum = [];\n\tlet accumBytes = 0;\n\tlet abort = false;\n\n\treturn new Body.Promise(function (resolve, reject) {\n\t\tlet resTimeout;\n\n\t\t// allow timeout on slow response body\n\t\tif (_this4.timeout) {\n\t\t\tresTimeout = setTimeout(function () {\n\t\t\t\tabort = true;\n\t\t\t\treject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));\n\t\t\t}, _this4.timeout);\n\t\t}\n\n\t\t// handle stream errors\n\t\tbody.on('error', function (err) {\n\t\t\tif (err.name === 'AbortError') {\n\t\t\t\t// if the request was aborted, reject with this Error\n\t\t\t\tabort = true;\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\t// other errors, such as incorrect content-encoding\n\t\t\t\treject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));\n\t\t\t}\n\t\t});\n\n\t\tbody.on('data', function (chunk) {\n\t\t\tif (abort || chunk === null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (_this4.size && accumBytes + chunk.length > _this4.size) {\n\t\t\t\tabort = true;\n\t\t\t\treject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\taccumBytes += chunk.length;\n\t\t\taccum.push(chunk);\n\t\t});\n\n\t\tbody.on('end', function () {\n\t\t\tif (abort) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tclearTimeout(resTimeout);\n\n\t\t\ttry {\n\t\t\t\tresolve(Buffer.concat(accum, accumBytes));\n\t\t\t} catch (err) {\n\t\t\t\t// handle streams that have accumulated too much data (issue #414)\n\t\t\t\treject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Detect buffer encoding and convert to target encoding\n * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding\n *\n * @param   Buffer  buffer    Incoming buffer\n * @param   String  encoding  Target encoding\n * @return  String\n */\nfunction convertBody(buffer, headers) {\n\tif (typeof convert !== 'function') {\n\t\tthrow new Error('The package `encoding` must be installed to use the textConverted() function');\n\t}\n\n\tconst ct = headers.get('content-type');\n\tlet charset = 'utf-8';\n\tlet res, str;\n\n\t// header\n\tif (ct) {\n\t\tres = /charset=([^;]*)/i.exec(ct);\n\t}\n\n\t// no charset in content type, peek at response body for at most 1024 bytes\n\tstr = buffer.slice(0, 1024).toString();\n\n\t// html5\n\tif (!res && str) {\n\t\tres = /<meta.+?charset=(['\"])(.+?)\\1/i.exec(str);\n\t}\n\n\t// html4\n\tif (!res && str) {\n\t\tres = /<meta[\\s]+?http-equiv=(['\"])content-type\\1[\\s]+?content=(['\"])(.+?)\\2/i.exec(str);\n\n\t\tif (res) {\n\t\t\tres = /charset=(.*)/i.exec(res.pop());\n\t\t}\n\t}\n\n\t// xml\n\tif (!res && str) {\n\t\tres = /<\\?xml.+?encoding=(['\"])(.+?)\\1/i.exec(str);\n\t}\n\n\t// found charset\n\tif (res) {\n\t\tcharset = res.pop();\n\n\t\t// prevent decode issues when sites use incorrect encoding\n\t\t// ref: https://hsivonen.fi/encoding-menu/\n\t\tif (charset === 'gb2312' || charset === 'gbk') {\n\t\t\tcharset = 'gb18030';\n\t\t}\n\t}\n\n\t// turn raw buffers into a single utf-8 buffer\n\treturn convert(buffer, 'UTF-8', charset).toString();\n}\n\n/**\n * Detect a URLSearchParams object\n * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143\n *\n * @param   Object  obj     Object to detect by type or brand\n * @return  String\n */\nfunction isURLSearchParams(obj) {\n\t// Duck-typing as a necessary condition.\n\tif (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {\n\t\treturn false;\n\t}\n\n\t// Brand-checking and more duck-typing as optional condition.\n\treturn obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';\n}\n\n/**\n * Check if `obj` is a W3C `Blob` object (which `File` inherits from)\n * @param  {*} obj\n * @return {boolean}\n */\nfunction isBlob(obj) {\n\treturn typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);\n}\n\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed  instance  Response or Request instance\n * @return  Mixed\n */\nfunction clone(instance) {\n\tlet p1, p2;\n\tlet body = instance.body;\n\n\t// don't allow cloning a used body\n\tif (instance.bodyUsed) {\n\t\tthrow new Error('cannot clone body after it is used');\n\t}\n\n\t// check that body is a stream and not form-data object\n\t// note: we can't clone the form-data object without having it as a dependency\n\tif (body instanceof Stream && typeof body.getBoundary !== 'function') {\n\t\t// tee instance body\n\t\tp1 = new PassThrough();\n\t\tp2 = new PassThrough();\n\t\tbody.pipe(p1);\n\t\tbody.pipe(p2);\n\t\t// set instance body to teed body and return the other teed body\n\t\tinstance[INTERNALS].body = p1;\n\t\tbody = p2;\n\t}\n\n\treturn body;\n}\n\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param   Mixed  instance  Any options.body input\n */\nfunction extractContentType(body) {\n\tif (body === null) {\n\t\t// body is null\n\t\treturn null;\n\t} else if (typeof body === 'string') {\n\t\t// body is string\n\t\treturn 'text/plain;charset=UTF-8';\n\t} else if (isURLSearchParams(body)) {\n\t\t// body is a URLSearchParams\n\t\treturn 'application/x-www-form-urlencoded;charset=UTF-8';\n\t} else if (isBlob(body)) {\n\t\t// body is blob\n\t\treturn body.type || null;\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\treturn null;\n\t} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {\n\t\t// body is ArrayBuffer\n\t\treturn null;\n\t} else if (ArrayBuffer.isView(body)) {\n\t\t// body is ArrayBufferView\n\t\treturn null;\n\t} else if (typeof body.getBoundary === 'function') {\n\t\t// detect form data input from form-data module\n\t\treturn `multipart/form-data;boundary=${body.getBoundary()}`;\n\t} else if (body instanceof Stream) {\n\t\t// body is stream\n\t\t// can't really do much about this\n\t\treturn null;\n\t} else {\n\t\t// Body constructor defaults other things to string\n\t\treturn 'text/plain;charset=UTF-8';\n\t}\n}\n\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param   Body    instance   Instance of Body\n * @return  Number?            Number of bytes, or null if not possible\n */\nfunction getTotalBytes(instance) {\n\tconst body = instance.body;\n\n\n\tif (body === null) {\n\t\t// body is null\n\t\treturn 0;\n\t} else if (isBlob(body)) {\n\t\treturn body.size;\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\treturn body.length;\n\t} else if (body && typeof body.getLengthSync === 'function') {\n\t\t// detect form data input from form-data module\n\t\tif (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x\n\t\tbody.hasKnownLength && body.hasKnownLength()) {\n\t\t\t// 2.x\n\t\t\treturn body.getLengthSync();\n\t\t}\n\t\treturn null;\n\t} else {\n\t\t// body is stream\n\t\treturn null;\n\t}\n}\n\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param   Body    instance   Instance of Body\n * @return  Void\n */\nfunction writeToStream(dest, instance) {\n\tconst body = instance.body;\n\n\n\tif (body === null) {\n\t\t// body is null\n\t\tdest.end();\n\t} else if (isBlob(body)) {\n\t\tbody.stream().pipe(dest);\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\tdest.write(body);\n\t\tdest.end();\n\t} else {\n\t\t// body is stream\n\t\tbody.pipe(dest);\n\t}\n}\n\n// expose Promise\nBody.Promise = global.Promise;\n\n/**\n * headers.js\n *\n * Headers class offers convenient helpers\n */\n\nconst invalidTokenRegex = /[^\\^_`a-zA-Z\\-0-9!#$%&'*+.|~]/;\nconst invalidHeaderCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/;\n\nfunction validateName(name) {\n\tname = `${name}`;\n\tif (invalidTokenRegex.test(name) || name === '') {\n\t\tthrow new TypeError(`${name} is not a legal HTTP header name`);\n\t}\n}\n\nfunction validateValue(value) {\n\tvalue = `${value}`;\n\tif (invalidHeaderCharRegex.test(value)) {\n\t\tthrow new TypeError(`${value} is not a legal HTTP header value`);\n\t}\n}\n\n/**\n * Find the key in the map object given a header name.\n *\n * Returns undefined if not found.\n *\n * @param   String  name  Header name\n * @return  String|Undefined\n */\nfunction find(map, name) {\n\tname = name.toLowerCase();\n\tfor (const key in map) {\n\t\tif (key.toLowerCase() === name) {\n\t\t\treturn key;\n\t\t}\n\t}\n\treturn undefined;\n}\n\nconst MAP = Symbol('map');\nclass Headers {\n\t/**\n  * Headers class\n  *\n  * @param   Object  headers  Response headers\n  * @return  Void\n  */\n\tconstructor() {\n\t\tlet init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n\t\tthis[MAP] = Object.create(null);\n\n\t\tif (init instanceof Headers) {\n\t\t\tconst rawHeaders = init.raw();\n\t\t\tconst headerNames = Object.keys(rawHeaders);\n\n\t\t\tfor (const headerName of headerNames) {\n\t\t\t\tfor (const value of rawHeaders[headerName]) {\n\t\t\t\t\tthis.append(headerName, value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// We don't worry about converting prop to ByteString here as append()\n\t\t// will handle it.\n\t\tif (init == null) ; else if (typeof init === 'object') {\n\t\t\tconst method = init[Symbol.iterator];\n\t\t\tif (method != null) {\n\t\t\t\tif (typeof method !== 'function') {\n\t\t\t\t\tthrow new TypeError('Header pairs must be iterable');\n\t\t\t\t}\n\n\t\t\t\t// sequence<sequence<ByteString>>\n\t\t\t\t// Note: per spec we have to first exhaust the lists then process them\n\t\t\t\tconst pairs = [];\n\t\t\t\tfor (const pair of init) {\n\t\t\t\t\tif (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {\n\t\t\t\t\t\tthrow new TypeError('Each header pair must be iterable');\n\t\t\t\t\t}\n\t\t\t\t\tpairs.push(Array.from(pair));\n\t\t\t\t}\n\n\t\t\t\tfor (const pair of pairs) {\n\t\t\t\t\tif (pair.length !== 2) {\n\t\t\t\t\t\tthrow new TypeError('Each header pair must be a name/value tuple');\n\t\t\t\t\t}\n\t\t\t\t\tthis.append(pair[0], pair[1]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// record<ByteString, ByteString>\n\t\t\t\tfor (const key of Object.keys(init)) {\n\t\t\t\t\tconst value = init[key];\n\t\t\t\t\tthis.append(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError('Provided initializer must be an object');\n\t\t}\n\t}\n\n\t/**\n  * Return combined header value given name\n  *\n  * @param   String  name  Header name\n  * @return  Mixed\n  */\n\tget(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key === undefined) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this[MAP][key].join(', ');\n\t}\n\n\t/**\n  * Iterate over all headers\n  *\n  * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)\n  * @param   Boolean   thisArg   `this` context for callback function\n  * @return  Void\n  */\n\tforEach(callback) {\n\t\tlet thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n\t\tlet pairs = getHeaders(this);\n\t\tlet i = 0;\n\t\twhile (i < pairs.length) {\n\t\t\tvar _pairs$i = pairs[i];\n\t\t\tconst name = _pairs$i[0],\n\t\t\t      value = _pairs$i[1];\n\n\t\t\tcallback.call(thisArg, value, name, this);\n\t\t\tpairs = getHeaders(this);\n\t\t\ti++;\n\t\t}\n\t}\n\n\t/**\n  * Overwrite header values given name\n  *\n  * @param   String  name   Header name\n  * @param   String  value  Header value\n  * @return  Void\n  */\n\tset(name, value) {\n\t\tname = `${name}`;\n\t\tvalue = `${value}`;\n\t\tvalidateName(name);\n\t\tvalidateValue(value);\n\t\tconst key = find(this[MAP], name);\n\t\tthis[MAP][key !== undefined ? key : name] = [value];\n\t}\n\n\t/**\n  * Append a value onto existing header\n  *\n  * @param   String  name   Header name\n  * @param   String  value  Header value\n  * @return  Void\n  */\n\tappend(name, value) {\n\t\tname = `${name}`;\n\t\tvalue = `${value}`;\n\t\tvalidateName(name);\n\t\tvalidateValue(value);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key !== undefined) {\n\t\t\tthis[MAP][key].push(value);\n\t\t} else {\n\t\t\tthis[MAP][name] = [value];\n\t\t}\n\t}\n\n\t/**\n  * Check for header name existence\n  *\n  * @param   String   name  Header name\n  * @return  Boolean\n  */\n\thas(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\treturn find(this[MAP], name) !== undefined;\n\t}\n\n\t/**\n  * Delete all header values given name\n  *\n  * @param   String  name  Header name\n  * @return  Void\n  */\n\tdelete(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key !== undefined) {\n\t\t\tdelete this[MAP][key];\n\t\t}\n\t}\n\n\t/**\n  * Return raw headers (non-spec api)\n  *\n  * @return  Object\n  */\n\traw() {\n\t\treturn this[MAP];\n\t}\n\n\t/**\n  * Get an iterator on keys.\n  *\n  * @return  Iterator\n  */\n\tkeys() {\n\t\treturn createHeadersIterator(this, 'key');\n\t}\n\n\t/**\n  * Get an iterator on values.\n  *\n  * @return  Iterator\n  */\n\tvalues() {\n\t\treturn createHeadersIterator(this, 'value');\n\t}\n\n\t/**\n  * Get an iterator on entries.\n  *\n  * This is the default iterator of the Headers object.\n  *\n  * @return  Iterator\n  */\n\t[Symbol.iterator]() {\n\t\treturn createHeadersIterator(this, 'key+value');\n\t}\n}\nHeaders.prototype.entries = Headers.prototype[Symbol.iterator];\n\nObject.defineProperty(Headers.prototype, Symbol.toStringTag, {\n\tvalue: 'Headers',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\nObject.defineProperties(Headers.prototype, {\n\tget: { enumerable: true },\n\tforEach: { enumerable: true },\n\tset: { enumerable: true },\n\tappend: { enumerable: true },\n\thas: { enumerable: true },\n\tdelete: { enumerable: true },\n\tkeys: { enumerable: true },\n\tvalues: { enumerable: true },\n\tentries: { enumerable: true }\n});\n\nfunction getHeaders(headers) {\n\tlet kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';\n\n\tconst keys = Object.keys(headers[MAP]).sort();\n\treturn keys.map(kind === 'key' ? function (k) {\n\t\treturn k.toLowerCase();\n\t} : kind === 'value' ? function (k) {\n\t\treturn headers[MAP][k].join(', ');\n\t} : function (k) {\n\t\treturn [k.toLowerCase(), headers[MAP][k].join(', ')];\n\t});\n}\n\nconst INTERNAL = Symbol('internal');\n\nfunction createHeadersIterator(target, kind) {\n\tconst iterator = Object.create(HeadersIteratorPrototype);\n\titerator[INTERNAL] = {\n\t\ttarget,\n\t\tkind,\n\t\tindex: 0\n\t};\n\treturn iterator;\n}\n\nconst HeadersIteratorPrototype = Object.setPrototypeOf({\n\tnext() {\n\t\t// istanbul ignore if\n\t\tif (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {\n\t\t\tthrow new TypeError('Value of `this` is not a HeadersIterator');\n\t\t}\n\n\t\tvar _INTERNAL = this[INTERNAL];\n\t\tconst target = _INTERNAL.target,\n\t\t      kind = _INTERNAL.kind,\n\t\t      index = _INTERNAL.index;\n\n\t\tconst values = getHeaders(target, kind);\n\t\tconst len = values.length;\n\t\tif (index >= len) {\n\t\t\treturn {\n\t\t\t\tvalue: undefined,\n\t\t\t\tdone: true\n\t\t\t};\n\t\t}\n\n\t\tthis[INTERNAL].index = index + 1;\n\n\t\treturn {\n\t\t\tvalue: values[index],\n\t\t\tdone: false\n\t\t};\n\t}\n}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));\n\nObject.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {\n\tvalue: 'HeadersIterator',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\n/**\n * Export the Headers object in a form that Node.js can consume.\n *\n * @param   Headers  headers\n * @return  Object\n */\nfunction exportNodeCompatibleHeaders(headers) {\n\tconst obj = Object.assign({ __proto__: null }, headers[MAP]);\n\n\t// http.request() only supports string as Host header. This hack makes\n\t// specifying custom Host header possible.\n\tconst hostHeaderKey = find(headers[MAP], 'Host');\n\tif (hostHeaderKey !== undefined) {\n\t\tobj[hostHeaderKey] = obj[hostHeaderKey][0];\n\t}\n\n\treturn obj;\n}\n\n/**\n * Create a Headers object from an object of headers, ignoring those that do\n * not conform to HTTP grammar productions.\n *\n * @param   Object  obj  Object of headers\n * @return  Headers\n */\nfunction createHeadersLenient(obj) {\n\tconst headers = new Headers();\n\tfor (const name of Object.keys(obj)) {\n\t\tif (invalidTokenRegex.test(name)) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (Array.isArray(obj[name])) {\n\t\t\tfor (const val of obj[name]) {\n\t\t\t\tif (invalidHeaderCharRegex.test(val)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (headers[MAP][name] === undefined) {\n\t\t\t\t\theaders[MAP][name] = [val];\n\t\t\t\t} else {\n\t\t\t\t\theaders[MAP][name].push(val);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!invalidHeaderCharRegex.test(obj[name])) {\n\t\t\theaders[MAP][name] = [obj[name]];\n\t\t}\n\t}\n\treturn headers;\n}\n\nconst INTERNALS$1 = Symbol('Response internals');\n\n// fix an issue where \"STATUS_CODES\" aren't a named export for node <10\nconst STATUS_CODES = http.STATUS_CODES;\n\n/**\n * Response class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nclass Response {\n\tconstructor() {\n\t\tlet body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\t\tlet opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\tBody.call(this, body, opts);\n\n\t\tconst status = opts.status || 200;\n\t\tconst headers = new Headers(opts.headers);\n\n\t\tif (body != null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(body);\n\t\t\tif (contentType) {\n\t\t\t\theaders.append('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tthis[INTERNALS$1] = {\n\t\t\turl: opts.url,\n\t\t\tstatus,\n\t\t\tstatusText: opts.statusText || STATUS_CODES[status],\n\t\t\theaders,\n\t\t\tcounter: opts.counter\n\t\t};\n\t}\n\n\tget url() {\n\t\treturn this[INTERNALS$1].url || '';\n\t}\n\n\tget status() {\n\t\treturn this[INTERNALS$1].status;\n\t}\n\n\t/**\n  * Convenience property representing if the request ended normally\n  */\n\tget ok() {\n\t\treturn this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;\n\t}\n\n\tget redirected() {\n\t\treturn this[INTERNALS$1].counter > 0;\n\t}\n\n\tget statusText() {\n\t\treturn this[INTERNALS$1].statusText;\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS$1].headers;\n\t}\n\n\t/**\n  * Clone this response\n  *\n  * @return  Response\n  */\n\tclone() {\n\t\treturn new Response(clone(this), {\n\t\t\turl: this.url,\n\t\t\tstatus: this.status,\n\t\t\tstatusText: this.statusText,\n\t\t\theaders: this.headers,\n\t\t\tok: this.ok,\n\t\t\tredirected: this.redirected\n\t\t});\n\t}\n}\n\nBody.mixIn(Response.prototype);\n\nObject.defineProperties(Response.prototype, {\n\turl: { enumerable: true },\n\tstatus: { enumerable: true },\n\tok: { enumerable: true },\n\tredirected: { enumerable: true },\n\tstatusText: { enumerable: true },\n\theaders: { enumerable: true },\n\tclone: { enumerable: true }\n});\n\nObject.defineProperty(Response.prototype, Symbol.toStringTag, {\n\tvalue: 'Response',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\nconst INTERNALS$2 = Symbol('Request internals');\n\n// fix an issue where \"format\", \"parse\" aren't a named export for node <10\nconst parse_url = Url.parse;\nconst format_url = Url.format;\n\nconst streamDestructionSupported = 'destroy' in Stream.Readable.prototype;\n\n/**\n * Check if a value is an instance of Request.\n *\n * @param   Mixed   input\n * @return  Boolean\n */\nfunction isRequest(input) {\n\treturn typeof input === 'object' && typeof input[INTERNALS$2] === 'object';\n}\n\nfunction isAbortSignal(signal) {\n\tconst proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);\n\treturn !!(proto && proto.constructor.name === 'AbortSignal');\n}\n\n/**\n * Request class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\nclass Request {\n\tconstructor(input) {\n\t\tlet init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\tlet parsedURL;\n\n\t\t// normalize input\n\t\tif (!isRequest(input)) {\n\t\t\tif (input && input.href) {\n\t\t\t\t// in order to support Node.js' Url objects; though WHATWG's URL objects\n\t\t\t\t// will fall into this branch also (since their `toString()` will return\n\t\t\t\t// `href` property anyway)\n\t\t\t\tparsedURL = parse_url(input.href);\n\t\t\t} else {\n\t\t\t\t// coerce input to a string before attempting to parse\n\t\t\t\tparsedURL = parse_url(`${input}`);\n\t\t\t}\n\t\t\tinput = {};\n\t\t} else {\n\t\t\tparsedURL = parse_url(input.url);\n\t\t}\n\n\t\tlet method = init.method || input.method || 'GET';\n\t\tmethod = method.toUpperCase();\n\n\t\tif ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {\n\t\t\tthrow new TypeError('Request with GET/HEAD method cannot have body');\n\t\t}\n\n\t\tlet inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;\n\n\t\tBody.call(this, inputBody, {\n\t\t\ttimeout: init.timeout || input.timeout || 0,\n\t\t\tsize: init.size || input.size || 0\n\t\t});\n\n\t\tconst headers = new Headers(init.headers || input.headers || {});\n\n\t\tif (inputBody != null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(inputBody);\n\t\t\tif (contentType) {\n\t\t\t\theaders.append('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tlet signal = isRequest(input) ? input.signal : null;\n\t\tif ('signal' in init) signal = init.signal;\n\n\t\tif (signal != null && !isAbortSignal(signal)) {\n\t\t\tthrow new TypeError('Expected signal to be an instanceof AbortSignal');\n\t\t}\n\n\t\tthis[INTERNALS$2] = {\n\t\t\tmethod,\n\t\t\tredirect: init.redirect || input.redirect || 'follow',\n\t\t\theaders,\n\t\t\tparsedURL,\n\t\t\tsignal\n\t\t};\n\n\t\t// node-fetch-only options\n\t\tthis.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;\n\t\tthis.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;\n\t\tthis.counter = init.counter || input.counter || 0;\n\t\tthis.agent = init.agent || input.agent;\n\t}\n\n\tget method() {\n\t\treturn this[INTERNALS$2].method;\n\t}\n\n\tget url() {\n\t\treturn format_url(this[INTERNALS$2].parsedURL);\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS$2].headers;\n\t}\n\n\tget redirect() {\n\t\treturn this[INTERNALS$2].redirect;\n\t}\n\n\tget signal() {\n\t\treturn this[INTERNALS$2].signal;\n\t}\n\n\t/**\n  * Clone this request\n  *\n  * @return  Request\n  */\n\tclone() {\n\t\treturn new Request(this);\n\t}\n}\n\nBody.mixIn(Request.prototype);\n\nObject.defineProperty(Request.prototype, Symbol.toStringTag, {\n\tvalue: 'Request',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\nObject.defineProperties(Request.prototype, {\n\tmethod: { enumerable: true },\n\turl: { enumerable: true },\n\theaders: { enumerable: true },\n\tredirect: { enumerable: true },\n\tclone: { enumerable: true },\n\tsignal: { enumerable: true }\n});\n\n/**\n * Convert a Request to Node.js http request options.\n *\n * @param   Request  A Request instance\n * @return  Object   The options object to be passed to http.request\n */\nfunction getNodeRequestOptions(request) {\n\tconst parsedURL = request[INTERNALS$2].parsedURL;\n\tconst headers = new Headers(request[INTERNALS$2].headers);\n\n\t// fetch step 1.3\n\tif (!headers.has('Accept')) {\n\t\theaders.set('Accept', '*/*');\n\t}\n\n\t// Basic fetch\n\tif (!parsedURL.protocol || !parsedURL.hostname) {\n\t\tthrow new TypeError('Only absolute URLs are supported');\n\t}\n\n\tif (!/^https?:$/.test(parsedURL.protocol)) {\n\t\tthrow new TypeError('Only HTTP(S) protocols are supported');\n\t}\n\n\tif (request.signal && request.body instanceof Stream.Readable && !streamDestructionSupported) {\n\t\tthrow new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');\n\t}\n\n\t// HTTP-network-or-cache fetch steps 2.4-2.7\n\tlet contentLengthValue = null;\n\tif (request.body == null && /^(POST|PUT)$/i.test(request.method)) {\n\t\tcontentLengthValue = '0';\n\t}\n\tif (request.body != null) {\n\t\tconst totalBytes = getTotalBytes(request);\n\t\tif (typeof totalBytes === 'number') {\n\t\t\tcontentLengthValue = String(totalBytes);\n\t\t}\n\t}\n\tif (contentLengthValue) {\n\t\theaders.set('Content-Length', contentLengthValue);\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.11\n\tif (!headers.has('User-Agent')) {\n\t\theaders.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.15\n\tif (request.compress && !headers.has('Accept-Encoding')) {\n\t\theaders.set('Accept-Encoding', 'gzip,deflate');\n\t}\n\n\tlet agent = request.agent;\n\tif (typeof agent === 'function') {\n\t\tagent = agent(parsedURL);\n\t}\n\n\tif (!headers.has('Connection') && !agent) {\n\t\theaders.set('Connection', 'close');\n\t}\n\n\t// HTTP-network fetch step 4.2\n\t// chunked encoding is handled by Node.js\n\n\treturn Object.assign({}, parsedURL, {\n\t\tmethod: request.method,\n\t\theaders: exportNodeCompatibleHeaders(headers),\n\t\tagent\n\t});\n}\n\n/**\n * abort-error.js\n *\n * AbortError interface for cancelled requests\n */\n\n/**\n * Create AbortError instance\n *\n * @param   String      message      Error message for human\n * @return  AbortError\n */\nfunction AbortError(message) {\n  Error.call(this, message);\n\n  this.type = 'aborted';\n  this.message = message;\n\n  // hide custom error implementation details from end-users\n  Error.captureStackTrace(this, this.constructor);\n}\n\nAbortError.prototype = Object.create(Error.prototype);\nAbortError.prototype.constructor = AbortError;\nAbortError.prototype.name = 'AbortError';\n\n// fix an issue where \"PassThrough\", \"resolve\" aren't a named export for node <10\nconst PassThrough$1 = Stream.PassThrough;\nconst resolve_url = Url.resolve;\n\n/**\n * Fetch function\n *\n * @param   Mixed    url   Absolute url or Request instance\n * @param   Object   opts  Fetch options\n * @return  Promise\n */\nfunction fetch(url, opts) {\n\n\t// allow custom promise\n\tif (!fetch.Promise) {\n\t\tthrow new Error('native promise missing, set fetch.Promise to your favorite alternative');\n\t}\n\n\tBody.Promise = fetch.Promise;\n\n\t// wrap http.request into fetch\n\treturn new fetch.Promise(function (resolve, reject) {\n\t\t// build request object\n\t\tconst request = new Request(url, opts);\n\t\tconst options = getNodeRequestOptions(request);\n\n\t\tconst send = (options.protocol === 'https:' ? https : http).request;\n\t\tconst signal = request.signal;\n\n\t\tlet response = null;\n\n\t\tconst abort = function abort() {\n\t\t\tlet error = new AbortError('The user aborted a request.');\n\t\t\treject(error);\n\t\t\tif (request.body && request.body instanceof Stream.Readable) {\n\t\t\t\trequest.body.destroy(error);\n\t\t\t}\n\t\t\tif (!response || !response.body) return;\n\t\t\tresponse.body.emit('error', error);\n\t\t};\n\n\t\tif (signal && signal.aborted) {\n\t\t\tabort();\n\t\t\treturn;\n\t\t}\n\n\t\tconst abortAndFinalize = function abortAndFinalize() {\n\t\t\tabort();\n\t\t\tfinalize();\n\t\t};\n\n\t\t// send request\n\t\tconst req = send(options);\n\t\tlet reqTimeout;\n\n\t\tif (signal) {\n\t\t\tsignal.addEventListener('abort', abortAndFinalize);\n\t\t}\n\n\t\tfunction finalize() {\n\t\t\treq.abort();\n\t\t\tif (signal) signal.removeEventListener('abort', abortAndFinalize);\n\t\t\tclearTimeout(reqTimeout);\n\t\t}\n\n\t\tif (request.timeout) {\n\t\t\treq.once('socket', function (socket) {\n\t\t\t\treqTimeout = setTimeout(function () {\n\t\t\t\t\treject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));\n\t\t\t\t\tfinalize();\n\t\t\t\t}, request.timeout);\n\t\t\t});\n\t\t}\n\n\t\treq.on('error', function (err) {\n\t\t\treject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));\n\t\t\tfinalize();\n\t\t});\n\n\t\treq.on('response', function (res) {\n\t\t\tclearTimeout(reqTimeout);\n\n\t\t\tconst headers = createHeadersLenient(res.headers);\n\n\t\t\t// HTTP fetch step 5\n\t\t\tif (fetch.isRedirect(res.statusCode)) {\n\t\t\t\t// HTTP fetch step 5.2\n\t\t\t\tconst location = headers.get('Location');\n\n\t\t\t\t// HTTP fetch step 5.3\n\t\t\t\tconst locationURL = location === null ? null : resolve_url(request.url, location);\n\n\t\t\t\t// HTTP fetch step 5.5\n\t\t\t\tswitch (request.redirect) {\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\treject(new FetchError(`redirect mode is set to error: ${request.url}`, 'no-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'manual':\n\t\t\t\t\t\t// node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.\n\t\t\t\t\t\tif (locationURL !== null) {\n\t\t\t\t\t\t\t// handle corrupted header\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\theaders.set('Location', locationURL);\n\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t// istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request\n\t\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'follow':\n\t\t\t\t\t\t// HTTP-redirect fetch step 2\n\t\t\t\t\t\tif (locationURL === null) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 5\n\t\t\t\t\t\tif (request.counter >= request.follow) {\n\t\t\t\t\t\t\treject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 6 (counter increment)\n\t\t\t\t\t\t// Create a new Request object.\n\t\t\t\t\t\tconst requestOpts = {\n\t\t\t\t\t\t\theaders: new Headers(request.headers),\n\t\t\t\t\t\t\tfollow: request.follow,\n\t\t\t\t\t\t\tcounter: request.counter + 1,\n\t\t\t\t\t\t\tagent: request.agent,\n\t\t\t\t\t\t\tcompress: request.compress,\n\t\t\t\t\t\t\tmethod: request.method,\n\t\t\t\t\t\t\tbody: request.body,\n\t\t\t\t\t\t\tsignal: request.signal,\n\t\t\t\t\t\t\ttimeout: request.timeout\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 9\n\t\t\t\t\t\tif (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {\n\t\t\t\t\t\t\treject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 11\n\t\t\t\t\t\tif (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {\n\t\t\t\t\t\t\trequestOpts.method = 'GET';\n\t\t\t\t\t\t\trequestOpts.body = undefined;\n\t\t\t\t\t\t\trequestOpts.headers.delete('content-length');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 15\n\t\t\t\t\t\tresolve(fetch(new Request(locationURL, requestOpts)));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// prepare response\n\t\t\tres.once('end', function () {\n\t\t\t\tif (signal) signal.removeEventListener('abort', abortAndFinalize);\n\t\t\t});\n\t\t\tlet body = res.pipe(new PassThrough$1());\n\n\t\t\tconst response_options = {\n\t\t\t\turl: request.url,\n\t\t\t\tstatus: res.statusCode,\n\t\t\t\tstatusText: res.statusMessage,\n\t\t\t\theaders: headers,\n\t\t\t\tsize: request.size,\n\t\t\t\ttimeout: request.timeout,\n\t\t\t\tcounter: request.counter\n\t\t\t};\n\n\t\t\t// HTTP-network fetch step 12.1.1.3\n\t\t\tconst codings = headers.get('Content-Encoding');\n\n\t\t\t// HTTP-network fetch step 12.1.1.4: handle content codings\n\n\t\t\t// in following scenarios we ignore compression support\n\t\t\t// 1. compression support is disabled\n\t\t\t// 2. HEAD request\n\t\t\t// 3. no Content-Encoding header\n\t\t\t// 4. no content response (204)\n\t\t\t// 5. content not modified response (304)\n\t\t\tif (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {\n\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For Node v6+\n\t\t\t// Be less strict when decoding compressed responses, since sometimes\n\t\t\t// servers send slightly invalid responses that are still accepted\n\t\t\t// by common browsers.\n\t\t\t// Always using Z_SYNC_FLUSH is what cURL does.\n\t\t\tconst zlibOptions = {\n\t\t\t\tflush: zlib.Z_SYNC_FLUSH,\n\t\t\t\tfinishFlush: zlib.Z_SYNC_FLUSH\n\t\t\t};\n\n\t\t\t// for gzip\n\t\t\tif (codings == 'gzip' || codings == 'x-gzip') {\n\t\t\t\tbody = body.pipe(zlib.createGunzip(zlibOptions));\n\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// for deflate\n\t\t\tif (codings == 'deflate' || codings == 'x-deflate') {\n\t\t\t\t// handle the infamous raw deflate response from old servers\n\t\t\t\t// a hack for old IIS and Apache servers\n\t\t\t\tconst raw = res.pipe(new PassThrough$1());\n\t\t\t\traw.once('data', function (chunk) {\n\t\t\t\t\t// see http://stackoverflow.com/questions/37519828\n\t\t\t\t\tif ((chunk[0] & 0x0F) === 0x08) {\n\t\t\t\t\t\tbody = body.pipe(zlib.createInflate());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbody = body.pipe(zlib.createInflateRaw());\n\t\t\t\t\t}\n\t\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\t\tresolve(response);\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// for br\n\t\t\tif (codings == 'br' && typeof zlib.createBrotliDecompress === 'function') {\n\t\t\t\tbody = body.pipe(zlib.createBrotliDecompress());\n\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// otherwise, use response as-is\n\t\t\tresponse = new Response(body, response_options);\n\t\t\tresolve(response);\n\t\t});\n\n\t\twriteToStream(req, request);\n\t});\n}\n/**\n * Redirect code matching\n *\n * @param   Number   code  Status code\n * @return  Boolean\n */\nfetch.isRedirect = function (code) {\n\treturn code === 301 || code === 302 || code === 303 || code === 307 || code === 308;\n};\n\n// expose Promise\nfetch.Promise = global.Promise;\n\nexport default fetch;\nexport { Headers, Request, Response, FetchError };\n","/**\n * @author : Austin Ruby, Alex Chao, Ed Greenberg\n * @function : activate extension\n * @changelog : Ed Greenberg, November 5th, 2019, added flexible query file detection\n * @changelog : Alex Chao, Nov. 5th-10th 2019... Lots of changes... server listener added\n * - config file setup command made\n *   - config file option to allow for a longer time for the graphql server to startup\n * ! I propose we add the PORT number to config file\n * - updating variables in the event of changes in the config files\n * @changelog : ## Austin?\n * * */\n\n// eslint-disable-next-line import/no-unresolved\nimport * as vscode from 'vscode';\n\n// only needed for creating the config file\nconst fs = require('fs');\n\n\n/* eslint-disable import/no-unresolved */\nconst readFileSendReqAndWriteResponse = require('./modules/client/readFileSendReqAndWriteResponse');\nconst serverOn = require('./modules/server/serverOn');\nconst serverOff = require('./modules/server/serverOff');\n\n// require in new function that checks for a running server\nconst checkForRunningServer = require('./modules/server/checkForRunningServer');\n\n// require in file that finds root directory\nconst findRootDirectory = require('./modules/client/findRootDirectory');\n// require in file that returns entryPoint when given the root path\nconst parseConfigFile = require('./modules/client/parseConfigFile');\n// require in file that finds port#\nconst findPortNumber = require('./modules/client/findPortNumber');\n\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n  // * These are some variables that I need to pass between different commands, so they're in\n  // * a higher scope\n  // this ChannelRef variable will be used to pass the output channel between separate function defs\n  // let graphQuillChannelRef: vscode.OutputChannel;\n  const gqChannel = vscode.window.createOutputChannel('GraphQuill');\n\n  // a toggle variable that will is true when the server is on\n  let isOnToggle = false;\n\n  // a disposable variable to get rid of the save event listener\n  let saveListener: vscode.Disposable;\n\n  // set rootPath and entryPoint to a string of the path to the server startup file (has app.listen)\n  const rootPath = findRootDirectory();\n\n  // putting these variables in the global scope with the expectation that they will be set upon\n  // activating the extension. I'm moving them to be able to manage \"live\" changes\n  let entryPoint: string;\n  let allowServerTimeoutConfigSetting: number;\n\n  // set portNumber to a string. It is going to be set in the activation command\n  let portNumber: string;\n\n  // boolean to track if the server has been successfully turned on by the user\n  let serverTurnedOnByGraphQuill = false;\n\n  /** **********************************************************************************************\n   * * The command must be defined in package.json under contributes/commands AND activation events\n   * Now provide the implementation of the command with registerCommand\n   * The commandId parameter must match the command field in package.json\n   * * This is the first GraphQuill option in the command palette for activating GraphQuill\n  *********************************************************************************************** */\n  const disposableActivateGraphQuill = vscode.commands.registerCommand('extension.activateGraphQuill', async () => {\n    if (isOnToggle) {\n      // if server is already running, break out of function by returning null\n      console.log('Server is already running');\n      vscode.window.showInformationMessage('GraphQuill is already active');\n      return null;\n    }\n\n    // show output channel\n    gqChannel.show(true);\n\n    // parse the config file (this is important in case if there were any changes)\n    let parseResult = parseConfigFile(rootPath);\n    entryPoint = parseResult.entryPoint;\n    allowServerTimeoutConfigSetting = parseResult.allowServerTimeoutConfigSetting;\n\n    // if the entryPoint is falsey, break out of the function and tell the\n    // user to create a config file\n    if (!entryPoint) {\n      gqChannel.append('The config file was not found, please use the Create GraphQuill Config File Command to make one.');\n      // break out of this execution context\n      return null;\n    }\n\n    // set the portNumber (in the higher scope so it can be used in the deactivate function)\n    portNumber = findPortNumber(entryPoint);\n\n    // Check ONCE if the port is open (also this does not need the third param)\n    // will resolve to a true or false value\n    const serverOnFromUser = await checkForRunningServer(portNumber, true);\n    // console.log('--serverOnFromUser after once check is:', serverOnFromUser);\n\n    // trigger serverOn if the user does not already have the server running\n    if (!serverOnFromUser) {\n      // start up the user's server\n      serverOn(entryPoint);\n\n      // give user feedback that server is starting up\n      gqChannel.clear();\n      gqChannel.append('The server is starting up...');\n\n      // await this function that will return true or false based on if the server has been started\n      // false: if starting the server is longer than the time allotted in the config file (defaults\n      // to 3 seconds)\n      serverTurnedOnByGraphQuill = await checkForRunningServer(portNumber,\n        // once setting is false, so the returned promise will only resolve when the server has\n        // started OR the timeout (next variable or 3sec) is reached\n        false,\n        // allowServerT.C.S. is either a time in milliseconds that defaults to 3000\n        allowServerTimeoutConfigSetting);\n\n      // if it is false, that means there was an error starting the server\n      // notify the user & end the thread of execution\n      if (!serverTurnedOnByGraphQuill) {\n        // console.log('server is taking too long to startup');\n\n        // give feedback to user that port didn't start (and the specified timeout config setting,\n        // defaults to 3 seconds)\n        gqChannel.clear();\n        gqChannel.append(`The server is taking too long to startup (>${(allowServerTimeoutConfigSetting || 3000) / 1000} seconds).\\nTo increase this time, update the \"serverStartupTimeAllowed\" setting in the graphquill.config.js file.`);\n\n        // break out, and just in case I'm going to try to kill the port if it did open\n        // otherwise we could get runaway node processes...\n        return setTimeout(() => serverOff(portNumber), 5000);\n      }\n    }\n\n    // if the server is on from either the user or graphquill, continue\n    // send first query & setup on save listener\n    if (serverOnFromUser || serverTurnedOnByGraphQuill) {\n      // update isOnToggle (refers to state of GraphQuill extension running or not)\n      isOnToggle = true;\n\n      // clear any other stuff off of the channel (e.g. previous error message)\n      gqChannel.clear();\n\n      // get the fileName of the open file when the extension is FIRST fired\n      const currOpenEditorPath: string = vscode.window.activeTextEditor!.document.fileName;\n      // send that request from the currentopeneditor\n      readFileSendReqAndWriteResponse(currOpenEditorPath, gqChannel, portNumber, rootPath);\n\n      // initialize the save listener here to clear the channel and resend new requests\n      saveListener = vscode.workspace.onDidSaveTextDocument((event) => {\n        // console.log('save event!!!', event);\n\n        // clear the graphQuill channel\n        gqChannel.clear();\n\n        // re-parse the config file (in case the user made a change)\n        parseResult = parseConfigFile(rootPath);\n        entryPoint = parseResult.entryPoint;\n        allowServerTimeoutConfigSetting = parseResult.allowServerTimeoutConfigSetting;\n\n        if (!entryPoint) {\n          gqChannel.append('The config file was not found, please use the Create GraphQuill Config File Command to make one.');\n          // break out of this execution context\n          return null;\n        }\n\n        // ! I really think we should add the port number to the config file to specify to the user\n        // ! That the port number SHUOLD not be changed...\n        // TODO this seems very redundant... but I'm blanking on how to make this dynamic\n        // TODO update if the user changes their server file...\n        // on each save... reparse for a portNumber in case if it was changed\n        portNumber = findPortNumber(entryPoint);\n\n        // send the filename and channel to the readFileSRAWR function\n        readFileSendReqAndWriteResponse(event.fileName, gqChannel, portNumber, rootPath);\n\n        // satisfying linter\n        return null;\n      });\n    }\n\n    // to satisfy typescript linter...\n    return null;\n  });\n\n  // push it to the subscriptions\n  context.subscriptions.push(disposableActivateGraphQuill);\n\n\n  /** **************************************************************************\n   * * Second GraphQuill option in the command palette (Cmd Shift P) for deactivating graphquill\n  ************************************************************************** */\n  const disposableDisableGraphQuill = vscode.commands.registerCommand('extension.deactivateGraphQuill', () => {\n    // console.log('--deactivate functionality triggered');\n\n    // check isontoggle boolean\n    if (!isOnToggle) {\n      // server is already off\n      console.log('server is already off');\n      vscode.window.showInformationMessage('GraphQuill is already off');\n\n      return null;\n    }\n\n    // change toggle boolean\n    isOnToggle = false;\n\n    // dispose of the onDidSaveTextDocument event listener\n    if (saveListener) saveListener.dispose();\n\n    // close/hide GraphQuill channel\n    gqChannel.hide();\n    gqChannel.clear();\n\n    console.log('in deactivate, the server turned on by graphquill boolean is: ', serverTurnedOnByGraphQuill);\n    // invoke server off in this function\n    return setTimeout(() => (serverTurnedOnByGraphQuill && serverOff(portNumber)), 1);\n  });\n\n  // push it into the subscriptions\n  context.subscriptions.push(disposableDisableGraphQuill);\n\n\n  /** **************************************************************************\n   * * Third GraphQuill option in command palette to toggle graphquill extension\n   ************************************************************************** */\n  const disposableToggleGraphQuill = vscode.commands.registerCommand('extension.toggleGraphQuill', () => {\n    // console.log('--toggle triggered!');\n\n    // if the toggle boolean is false, then start the extension, otherwise end it...\n    if (!isOnToggle) {\n      // console.log('--toggle starting extension');\n      // using the built in execute command and passing in a string of the command to trigger\n      vscode.commands.executeCommand('extension.activateGraphQuill');\n    } else {\n      // console.log('--toggle stopping the extension');\n      vscode.commands.executeCommand('extension.deactivateGraphQuill');\n    }\n\n    // just to make the linter happy...\n    return null;\n  });\n\n  // push it to the subscriptions\n  context.subscriptions.push(disposableToggleGraphQuill);\n\n  /** **************************************************************************\n   * * Fourth GraphQuill option in command palette to CREATE A CONFIG FILE\n   ************************************************************************** */\n  const disposableCreateConfigFile = vscode.commands.registerCommand('extension.createConfigFile', () => {\n    // console.log('--config file setup triggered');\n\n    // check if the root directory already has a graphquill.config.json file\n    const graphQuillConfigPath = `${rootPath}/graphquill.config.js`;\n    if (fs.existsSync(graphQuillConfigPath)) {\n      vscode.window.showInformationMessage(`A GraphQuill configuration file already exists at ${graphQuillConfigPath}`);\n      // exit out\n      return null;\n    }\n\n    // if it does not already exist, write to a new file\n    fs.writeFileSync(graphQuillConfigPath,\n      // string to populate the file with\n      'module.exports = {\\n  // change \"./server/index.js\" to the relative path from the root directory to\\n  // the file that starts your server\\n  entry: \\'./server/index.js\\',\\n\\n  // to increase the amount of time allowed for the server to startup, add a time\\n  // in milliseconds (integer) to the \"serverStartupTimeAllowed\"\\n  // serverStartupTimeAllowed: 5000,\\n};\\n',\n      'utf-8');\n\n    // open the file in vscode\n    vscode.workspace.openTextDocument(graphQuillConfigPath).then((doc) => {\n      // apparently openTextDocument doesn't mean it's visible...\n      vscode.window.showTextDocument(doc);\n    });\n\n    return null;\n  });\n\n  // push it to the subscriptions\n  context.subscriptions.push(disposableCreateConfigFile);\n}\n\n\n// this method is called when your extension is deactivated\nexport function deactivate() {\n  // deactivate must return a promise if cleanup operations are async.\n  // turn the server off if vscode is closed (tested via lsof in terminal)\n\n  // console.log('---deactive function called!!');\n\n  // executing the deactivateGQ command seems to achieve a similar effect & is nice because it has\n  // access to the portNumber variable\n  vscode.commands.executeCommand('extension.deactivateGraphQuill');\n  // return setTimeout(() => serverOff(3000), 1);\n}\n","var map = {\n\t\"./checkQueryBrackets\": \"./src/modules/client/checkQueryBrackets.ts\",\n\t\"./checkQueryBrackets.ts\": \"./src/modules/client/checkQueryBrackets.ts\",\n\t\"./extractQueries\": \"./src/modules/client/extractQueries.ts\",\n\t\"./extractQueries.ts\": \"./src/modules/client/extractQueries.ts\",\n\t\"./findPortNumber\": \"./src/modules/client/findPortNumber.ts\",\n\t\"./findPortNumber.ts\": \"./src/modules/client/findPortNumber.ts\",\n\t\"./findRootDirectory\": \"./src/modules/client/findRootDirectory.ts\",\n\t\"./findRootDirectory.ts\": \"./src/modules/client/findRootDirectory.ts\",\n\t\"./parseConfigFile\": \"./src/modules/client/parseConfigFile.ts\",\n\t\"./parseConfigFile.ts\": \"./src/modules/client/parseConfigFile.ts\",\n\t\"./parseQuery\": \"./src/modules/client/parseQuery.ts\",\n\t\"./parseQuery.ts\": \"./src/modules/client/parseQuery.ts\",\n\t\"./readFileSendReqAndWriteResponse\": \"./src/modules/client/readFileSendReqAndWriteResponse.ts\",\n\t\"./readFileSendReqAndWriteResponse.ts\": \"./src/modules/client/readFileSendReqAndWriteResponse.ts\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./src/modules/client sync recursive ^.*$\";","/**\n * @module : parser.ts\n * @author : Austin Ruby\n * @function : parse string for instances of 'graphQuill' and extract content\n * within parens immediately following each instance\n * @changelog : Ed Greenberg, November 4th, 2019, rewrote to remove enum bug\n * @changelog : ##WHOEVER CHANGES THE FILE, date, details\n * * */\n\n\n// check if parens are balanced for parsed query strings\n// if they're balanced, return original query string\n// if they're not, return error message with imbalanced bracket/s\nfunction checkQueryBrackets(queryString: string) {\n  const stack: string[] = []; // the core of the function...\n  // ...where detected opening brackets will be pushed in and pop off when the parser finds a mate\n  const validatedSoFar: string[] = []; // a running copy of the query\n  const openings: string = '{[('; // list of opening brackets\n  const closings: string = '}])'; // list of closing brackets\n\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const el of queryString) { // loop the query\n    if (openings.includes(el)) stack.push(el); // if query el is opening bracket, add el to stack\n    if (closings.includes(el)) {\n      if (stack[stack.length - 1] === openings[closings.indexOf(el)]) stack.pop();\n      // if top of stack mates a new closing bracket, we are good, can reduce stack and keep going\n      else break;\n      // if the top of stack does not mate closing bracket, we stop loop and skip to declaring error\n    }\n    validatedSoFar.push(el); // helping keep running copy of query\n  }\n\n\n  return stack.length === 0 // this will be zero if all query brackets have matches\n    ? queryString.slice(1, queryString.length - 1) // this substring is sent ahead if validated\n    : new Error(`${`The following character makes the query unbalanced: ${stack[stack.length - 1]}\\n`\n      + 'The portion of the query that ran before the unbalance was detected was:\\n'}${\n      validatedSoFar.join('')}\\n\\n`); // ...otherwise, we report an error\n}\n\nmodule.exports = checkQueryBrackets;\n","/* eslint-disable import/no-unresolved */\n// import { builtinModules } from 'module';\n\nimport parseQuery from './parseQuery';\n\nconst useCheckQueryBrackets = require('./checkQueryBrackets');\n\n// given file path, read file at path and parse for instances of 'graphQuill'\nfunction extractQueries(string: string) {\n  // console.log(string);\n  // define text to search for in file\n  const gq: string = 'graphQuill';\n  const queriesArr: string[] = [];\n  // iterate over string\n  for (let i: number = 0; i < string.length; i += 1) {\n    // if current slice of string is 'graphQuill'\n    // then push evaluated result of parseQueries passing in\n    // string sliced from current char to end into queriesArr\n    if (string.slice(i, i + gq.length) === gq) {\n      queriesArr.push(parseQuery(string.slice(i + gq.length)));\n    }\n  }\n\n  // after finding all instances of 'graphQuill' and parsing out query strings,\n  // map queries to new array full of either valid queries of errors\n  const validatedQueriesArr: (string | Error)[] = queriesArr.map((queryString) => (\n    useCheckQueryBrackets(queryString)));\n  // console.log('queriesArr: ', queriesArr);\n  // console.log('validatedQueriesArr: ', validatedQueriesArr);\n  return validatedQueriesArr;\n}// given file path, read file at path and parse for instances of 'graphQuill'\n\nmodule.exports = extractQueries;\n","/**\n * @author : Alex Chao\n * @function : return the portNumber as a string\n * @param: entryPoint\n * @returns: portNumber as a string\n * @changelog : ##WHOEVER CHANGES THE FILE, date, details\n * * */\n\nconst fs = require('fs');\n\nfunction findPortNumber(entryPoint: string) {\n  // this is a blocking (synchronous) call to the active file, populating 'data' as a string\n  const data = fs.readFileSync(entryPoint, 'utf8');\n\n  // to stop a localhost, we must first identify a port, and 'app.listen(' is\n  // a special string in the active file that is likely to be adjacent to the port number\n  const lookup = data.search(/app.listen\\(/);\n\n  // this next segment is edge case handling for if the port number\n  // is separated from the start parentheses by some number of spaces\n  let displace = 0;\n  while (data[lookup + displace + 11] === ' ') {\n    displace += 1;\n  }\n\n  // return the port number (accounting for the offsetting per the edge case)\n  return data.slice(lookup + 11 + displace, lookup + 15 + displace);\n}\n\nmodule.exports = findPortNumber;\n","/**\n * @author : Alex Chao Nov 7th, 2019. Modularized\n * @function : return the root directory path in a string\n * @param : none\n * @returns : string of the root directory\n * @changelog : ##WHOEVER CHANGES THE FILE, date, details\n * * */\n\n\n// eslint-disable-next-line import/no-unresolved\nimport * as vscode from 'vscode';\n\nconst path = require('path');\nconst fs = require('fs');\n\nfunction findRootDirectory() {\n  // identify entryPoint for the file that starts the server\n  // search for root directory by finding the package.json file\n  let root = path.dirname(vscode.window.activeTextEditor!.document.fileName);\n  while (!fs.existsSync(`${root}/package.json`)) {\n    root = path.dirname(root);\n  }\n\n  return root;\n}\n\nmodule.exports = findRootDirectory;\n","/* eslint-disable no-unused-vars */\n// these rules are disabled for the weird require that is inside of the function\n/* eslint-disable global-require */\n/* eslint-disable import/no-dynamic-require */\n\n/**\n * @author : Alex Chao\n * @function : return an object with the entryPoint and the allowServerTimeoutConfigSetting\n * @param : none\n * @returns : an array with the root directory AND the entryPoint strings\n * @changelog : ##WHOEVER CHANGES THE FILE, date, details\n * * */\n\n// eslint-disable-next-line import/no-unresolved\nimport * as vscode from 'vscode';\n\n// const path = require('path');\nconst fs = require('fs');\nconst path = require('path');\n\nfunction parseConfigFile(rootPath: string) {\n  // find config file in root directory\n  const gqConfigFilePath = `${rootPath}/graphquill.config.js`;\n\n  // ! a cached version of this file will be stored here, so future invocations that are trying\n  // to get results of an updated config file, will appear to not have been changed\n  delete require.cache[gqConfigFilePath];\n\n  let entryPoint : string;\n  let allowServerTimeoutConfigSetting : number|undefined;\n\n  if (fs.existsSync(gqConfigFilePath)) {\n    // if the config file exists, require it in (will come in as an object)\n    const configObject = require(`${gqConfigFilePath}`);\n    // console.log('config object in parseconfigfile.ts', configObject);\n\n    // set the entry point to the absolute path (root + relative entry path)\n    entryPoint = path.resolve(rootPath, configObject.entry);\n\n    // set the servertimeout config setting\n    allowServerTimeoutConfigSetting = configObject.serverStartupTimeAllowed;\n  } else {\n    // default it to the current open editor if there is not a config file\n    entryPoint = '';\n\n    // ! This will be handled in the outer extension.ts file to notify the user and break out of\n    // ! the thread of execution at the same time\n    // notify user that config file was not found and current file is being used as the entry point\n    // vscode.window.showInformationMessage('graphquill.config.js file was not found.\n    // Please use the Create GraphQuill Config File Command to create one');\n  }\n\n  // return the array with the two results, to be destrucutred when the function is invoked\n  return { entryPoint, allowServerTimeoutConfigSetting };\n}\n\nmodule.exports = parseConfigFile;\n","/**\n * @author : Austin Ruby\n * @function : parse and validate query\n * @changelog : Ed Greenberg, November 5th, 2019, created ability to return unbalanced parens\n * @changelog : ##WHOEVER CHANGES THE FILE, date, details\n * * */\n\n\n// add characters to string while within parentheses\nexport default function parseQuery(input: string) {\n  let queryString: string = ''; // string to be checked for balanced parens\n  let passedQueryString: string = ''; // string to be passed along\n  let closer: boolean = false; // trip to prevent passed along string from overwriting\n  let openParensCount: number = 0; // balanced parens validation tool\n  let closeParensCount: number = 0; // balanced parens valaidation tool\n  let index: number = 0; // helps loop through input\n  const stack: string[] = []; // helps determine when query should be passed along\n  while (index < input.length) { // loop input\n    if (input[index] === '(') { // check open parens\n      openParensCount += 1; // increment relevant counter\n      stack.push(input[index]); // add to stack\n    } else if (input[index] === ')') { // check closed parens\n      if (stack.length === 0) { // if stack is empty and we have a closed, we have a problem\n        return 'unbalanced parens';\n      }\n      closeParensCount += 1; // increment relevant counter\n      stack.pop(); // closed parens eliminates open parens on stack\n    }\n    queryString += input[index]; // feed current character in loop to preliminary result string\n    if (stack.length === 0 && closer === false) { // first time we hit empty stack...\n      passedQueryString = queryString; // create result stack;\n      closer = true;\n    }\n    index += 1;\n  }\n  return openParensCount === closeParensCount ? passedQueryString : 'unbalanced parens';\n}\n","// for requiring in .js files\n/* eslint-disable import/no-unresolved */\n\n// for vscode module being dumb\n/* eslint-disable no-unused-vars */\n\n/**\n * @module : readFileSendReqAndWriteResponse.ts\n * @author : Austin Ruby\n * @function : parse string for instances of 'graphQuill' and extract content\n * within parens immediately following each instance\n * @changelog : Ed Greenberg, November 5th, 2019, copy out boilerplate function invocation\n * to query file if not present\n * @changelog : Alex Chao, November 5th, 2019, merge conflict handling and server additions\n * @changelog : Alex Chao, November 6th, 2019, dynamic port number for fetching, coming from\n * the extension.ts file\n * * */\n\n// eslint-disable-next-line import/no-unresolved\nimport * as vscode from 'vscode';\n\nconst fetch = require('node-fetch');\nconst fs = require('fs');\n\nconst extractQueries = require('./extractQueries');\n\n// checkQueryBrackets used to be here\n// parseQuery used to be here\n// extractQueries was here\n\n// parent function to read file,\n// call helper functions to parse out query string,\n// send request to GraphQL API,\n// and return response to output channel\nfunction readFileSendReqAndWriteResponse(\n  filePath: string,\n  channel: vscode.OutputChannel,\n  portNumber: string,\n  rootPath: string, // passing the root path in to control the function def. injection\n) {\n  // console.log('inreadFile: ', filePath);\n\n  // parse the contents of the entire filePath file to a string\n  const copy = fs.readFileSync(filePath).toString();\n  // check if the file is within the root directory, otherwise we don't want to inject the\n  // function defintion\n  if (filePath.includes(rootPath) && !copy.includes('function graphQuill')) {\n    const newFile = `function graphQuill() {}\\n\\n${copy}`;\n    fs.writeFileSync(filePath, newFile);\n  }\n\n  // read user's file\n  fs.readFile(filePath, (err: Error, data: Buffer) => {\n    if (err) {\n      console.log(err);\n    } else {\n      // if no error, convert data to string and pass into gQParser to pull out query/ies\n      const result: (string | Error)[] = extractQueries(data.toString());\n\n      // send post request to API/graphql\n\n      setTimeout(() => {\n        // console.log('IN SET TIMEOUT');\n\n        // handle multiple queries in file...\n        // the additional quotes need to be parsed off\n        const queriesWithoutQuotes: (string|false)[] = result.filter(\n          // callback to remove empty string queries (i.e. the function def of graphQuill)\n          (e: string|Error) => (typeof e === 'string' && e.length),\n        ).map(\n          (query: string|Error) => (\n            // should all be strings...\n            typeof query === 'string' && query.slice(1, query.length - 1)\n          ),\n        );\n\n        console.log('--JUST THE QUERIES', queriesWithoutQuotes);\n\n\n        // TODO pair up the requests and responses. Right now the responses are coming in a random\n        // TODO order because of async fetches\n\n        // TODO MAKE THIS A PROMISE ALL? or does it not matter because the for loop will send off\n        // TODO all of the fetches simultaneously and just append responses on as they come in...\n        // console.log('query w/o quotes is', queryMinusQuotes);\n        queriesWithoutQuotes.forEach((query) => {\n          // send the fetch to the correct port (passed in as a variable)\n          fetch(`http://localhost:${portNumber}/graphql`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ query }),\n          })\n            .then((response: Response) => response.json())\n            .then((thing: Object) => {\n              console.log('printed: ', thing);\n              // append any graphql response to the output channel\n              channel.append(`\\n${JSON.stringify(thing, null, 2)}`); // may need to stringify to send\n              channel.show(true);\n            })\n            .catch((error: Error) => {\n              console.log('fetch catch error: ', error, typeof error, error.constructor.name);\n\n              // print any errors to the output channel\n              channel.append(`ERROR!!!\\n${JSON.stringify(error, null, 2)}`);\n            });\n        });\n\n        // only append this string to the output channel once\n        channel.append('Responses are:');\n      }, 1); // TODO BIG UX FIX NEEDED HERE\n\n      // then send response back to vscode output channel\n      // console.log('parsed queries are', result);\n      // TODO match these up with the correct queries when there are multiple within a single file\n      channel.append(`GraphQuill Queries are:\\n${result.filter((e : string|Error) => (typeof e === 'string' ? e.length : false))}\\n`);\n      channel.show(true);\n    }\n  });\n}\n\nmodule.exports = readFileSendReqAndWriteResponse;\n","/**\n * @module : checkForRunningServer.ts\n * @author : Alex Chao, Nov 7th, 2019\n * @function : uses child process and lsof to check if a port is currently running\n * @param : portNumber, string\n * @param : once: boolean, true if the function should check if the port is open right when the\n * function is run. OR false if the function should wait for the server to start before resolving\n * @param : allowServerTimeoutConfigSetting: number, user input from config file to determine how\n * long to wait for the server to start. Defaults to 3000 (milliseconds)\n * @returns : a boolean, true if the server has started, false if it has not started\n * @changelog : ##WHOEVER CHANGES THE FILE, date, details\n * * */\n\n// eslint-disable-next-line import/no-unresolved\n// import * as vscode from 'vscode';\n\n// const path = require('path');\n// const fs = require('fs');\nconst childProcess = require('child_process');\n\nconst checkForRunningServer = (\n  portNumber: string,\n  once: boolean,\n  allowServerTimeoutConfigSetting = 3000,\n) => {\n  console.log('CHECK FOR RUNNING SERVER IS RUNNINGGGGGG');\n  // console.log(portNumber, once, allowServerTimeoutConfigSetting);\n  // moved this line into the serverOn file so that each time serverOn is called\n  // a new child process is started. This is critical to being able to toggle\n  // GraphQuill on and off\n  let portOpen = false;\n  let allTerminalText: string;\n  const bashTerminal = childProcess.spawn('bash');\n\n  // next, we activate two terminal methods to give us\n  // feedback on whether we sucessfully used a child process\n  // note the Typescript (: any) used to handle unknown data inputs\n  bashTerminal.stdout.on('data', (data: Buffer) => {\n    // console.log(`--stdout from terminal: ${data}`);\n    console.log('terminal has printed some data...');\n    allTerminalText = data.toString();\n    portOpen = allTerminalText.includes('node');\n    // console.log('allterminal text', allTerminalText);\n    // console.log('---data type is', data.constructor.name);\n  });\n\n  // log what the exit code is in the extension terminal\n  bashTerminal.on('exit', (code: Number) => {\n    console.log(`checkForRunningServer child process exited with code ${code}`);\n    // console.log('--exit code type is', code.constructor.name);\n  });\n\n  // just below is the real core of the function, the child process:\n  // checks if the port is active with the `lsof -i :${portNumber}\\n` command\n  // IMPORTANT: code will not run without the '\\n' component--the CLI needs this\n  return new Promise((resolve) => {\n    let numRuns = 0;\n    let timeoutId: NodeJS.Timer;\n    // A set interval callback that will write a command to the terminal every 200ms, then check\n    // if the portOpen boolean has been changed (it is actually changed in the on-data listener\n    // above). Promise will resolve when the portOpen variable is true\n    const intervalLsofToBash = setInterval(() => {\n      bashTerminal.stdin.write(`lsof -i :${portNumber}\\n`);\n      // console.log('inside promise-- portOpen boolean', portOpen);\n      // console.log('inside promise-- allTerminalText', allTerminalText);\n\n      // if the port is open, resolve the promise, return some value...\n      if (portOpen) {\n        // clear set intervals\n        clearInterval(intervalLsofToBash);\n\n        // clear the timeoutId\n        if (timeoutId) clearTimeout(timeoutId);\n\n        // end terminal session\n        bashTerminal.stdin.end();\n\n        console.log('port is open!');\n\n        // resolve promise\n        // return a confirmed status\n        resolve(true);\n      }\n\n      // if once param was set to true, we only want to check if the server is \"immediately\" on, so\n      // check if once is true, and numRuns is greater than one, then resolve the promise with the\n      // result of portOpen\n      if (once && numRuns > 1) {\n        console.log('---once conditional triggered, result is:', portOpen);\n        // clear set intervals\n        clearInterval(intervalLsofToBash);\n\n        // clear the timeoutId\n        if (timeoutId) clearTimeout(timeoutId);\n\n        // end terminal session\n        bashTerminal.stdin.end();\n\n        resolve(portOpen);\n      }\n\n      // increment numRuns for the once conditional test\n      numRuns += 1;\n    }, 200); // Run every 200ms\n\n    // default/base case to resolve promise if the server hasn't started in 3 seconds\n    // This means the server is either spinning up too slowly or there is an error in the user's\n    // server starting file. In either case we want to return false\n    if (!once) {\n      // only create this default timeout if this function was invoked with once === false\n      timeoutId = setTimeout(() => {\n        console.log('timeout of checkForRunningServer');\n        // clear set intervals\n        clearInterval(intervalLsofToBash);\n\n        // end terminal session\n        bashTerminal.stdin.end();\n\n        // resolve the promise\n        resolve(false);\n      }, allowServerTimeoutConfigSetting); // default allowed time is 3 sec.\n    }\n  });\n};\n\nmodule.exports = checkForRunningServer;\n","/**\n * @module : serverOff.ts\n * @author : Ed Greenberg\n * @function : turn off server\n * @changelog : Ed Greenberg, November 5th, 2019, rewrote to open port on server/index.js\n * @changelog : ##WHOEVER CHANGES THE FILE, date, details\n * * */\n\n// eslint-disable-next-line import/no-unresolved\nimport * as vscode from 'vscode';\n\nconst fs = require('fs');\nconst path = require('path');\nconst childProcess = require('child_process');\n\n// spawn a new child process that will be used to close the open port\n\nconst serverOff = (portNumber: Number) => {\n  console.log('in serveroff function file');\n  // this one also had to be pulled into serverOff so that a new child process is started to\n  // kill the server port\n  const terminal2 = childProcess.spawn('bash');\n\n  // we find the root directory by looking up from the active file\n  // ...until we detect a folder with package.json\n  let root = path.dirname(vscode.window.activeTextEditor!.document.fileName);\n  while (!fs.existsSync(`${root}/package.json`)) {\n    root = path.dirname(root);\n    console.log('a root grows: ', root);\n  }\n\n  // const temp = vscode.window.activeTextEditor!.document.fileName;\n\n  // write any data/outputs from the terminal to the extension console\n  terminal2.stdout.on('data', (data: Buffer) => {\n    console.log(`stdout: ${data}`);\n  });\n\n  // on terminal exit, print the exit code\n  terminal2.on('exit', (code: Number) => {\n    console.log(`terminal2 child process exited with code ${code}`);\n  });\n\n  // // this is a blocking (synchronous) call to the active file, populating 'data' as a string\n  // const data = fs.readFileSync(`${root}/server/index.js`, 'utf8');\n\n  // // to stop a localhost, we must first identify a port, and 'app.listen(' is\n  // // a special string in the active file that is likely to be adjacent to the port number\n  // const lookup = data.search(/app.listen\\(/);\n\n  // // this next segment is edge case handling for if the port number\n  // // is separated from the start parentheses by some number of spaces\n  // let displace = 0;\n  // while (data[lookup + displace + 11] === ' ') {\n  //   displace += 1;\n  // }\n\n  // // in target, we slice the port out of the array (offsetting as required by the edge case test)\n  // // eslint-disable-next-line no-unused-vars\n  // const target = data.slice(lookup + 11 + displace, lookup + 15 + displace);\n\n  // ? I don't think these need to be delayed... just kill the process\n  // in the core of our function, we run a special command that finds and kills the port specified\n  // setTimeout(() => {\n  // terminal2.stdin.write(`kill $(lsof -t -i:${target})\\n`);\n  terminal2.stdin.write(`kill $(lsof -t -i:${portNumber})\\n`);\n  terminal2.stdin.end();\n  // }, 1);\n\n  vscode.window.showInformationMessage('GraphQuill has been turned off');\n};\n\nmodule.exports = serverOff;\n","/**\n * @module : serverOn.ts\n * @author : Ed Greenberg\n * @function : turn on server\n * @changelog : Ed Greenberg, November 5th, 2019, rewrote to open port on server/index.js\n * @changelog : ##WHOEVER CHANGES THE FILE, date, details\n * * */\n\n\n// eslint-disable-next-line import/no-unresolved\nimport * as vscode from 'vscode';\n\n// const path = require('path');\n// const fs = require('fs');\nconst childProcess = require('child_process');\n\n\nconst serverOn = (entryPoint: string) => {\n  // moved this line into the serverOn file so that each time serverOn is called\n  // a new child process is started. This is critical to being able to toggle\n  // GraphQuill on and off\n  const terminal = childProcess.spawn('bash');\n\n  // we find the root directory by looking up from the active file\n  // ...until we detect a folder with package.json\n  // let root = path.dirname(vscode.window.activeTextEditor!.document.fileName);\n  // while (!fs.existsSync(`${root}/package.json`)) {\n  //   root = path.dirname(root);\n  //   console.log('a root grows: ', root);\n  // }\n\n  // next, we activate two terminal methods to give us\n  // feedback on whether we sucessfully used a child process\n  // note the Typescript (: any) used to handle unknown data inputs\n  terminal.stdout.on('data', (data: Buffer) => {\n    // todo add validation, if there is an error that is logged here, it's coming from node\n    // todo and should be piped to the channel as well\n    // todo this may require passing in the channel to the serverOn function...\n    console.log(`stdout from terminal: ${data}`);\n    // console.log('---data type is', data.constructor.name);\n  });\n\n  // log what the exit code is in the extension terminal\n  terminal.on('exit', (code: Number) => {\n    console.log(`child process exited with code ${code}`);\n    // console.log('--exit code type is', code.constructor.name);\n  });\n\n  // just below is the real core of the function, the child process:\n  // we write to a new terminal to run the index.js file in the folder specified by base\n  // IMPORTANT: code will not run without the '\\n' component--the CLI needs this\n  // explicit return command\n  return new Promise((resolve) => {\n    // console.log('inside promise');\n    setTimeout(() => {\n      // console.log('root: ', root);\n      console.log('Sending stdin (node command) to terminal');\n\n      // this seems to take some time to spin up the server and\n      // throws an error with the timing of a fetch\n      // terminal.stdin.write(`node ${root}/server/index.js\\n`);\n      terminal.stdin.write(`node ${entryPoint}\\n`);\n      console.log('Ending terminal session');\n      terminal.stdin.end();\n\n      // resolve promise\n      resolve();\n      console.log('just resolved');\n\n      vscode.window.showInformationMessage('GraphQuill Activated');\n    }, 1);\n  });\n\n  // this message pops up to the user upon completion of the command\n};\n\nmodule.exports = serverOn;\n","module.exports = require(\"child_process\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"path\");","module.exports = require(\"stream\");","module.exports = require(\"url\");","module.exports = require(\"vscode\");","module.exports = require(\"zlib\");"],"sourceRoot":""}